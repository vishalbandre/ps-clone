<?php

/**
 * @file
 * Functions to support theming in the pop theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function pop_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  /* Add class to body tag */
  // $variables['attributes']['class'][] = 'drawer drawer--left';

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}



/**
 * Implements hook_page_attachments_alter().
 */
function pop_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}
use Drupal\filter\Entity\FilterFormat;
/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function pop_preprocess_page(array &$variables) {
  
}

function pop_preprocess_node__article(array &$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface) {
    $nid = $node->id();
    $tid = $node->field_category->target_id;
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
    if($term) {
      $name = $term->label();
      $variables['term'] = $name;
    }
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function pop_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function pop_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function pop_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function pop_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function pop_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function pop_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
  $variables['logo'] = file_url_transform_relative(file_create_url(theme_get_setting('logo.url')));
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function pop_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function pop_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function pop_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function pop_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function pop_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function pop_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function pop_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}


function theme_menu_item_link($link) {
  if (empty($link['localized_options'])) {
    $link['localized_options'] = array();
  }
  return l($link['title'], $link['href'], $link['localized_options']);
}


/**
 * Implements pop_form_alter().
 */
function pop_form_alter(&$form, Drupal\Core\Form\FormStateInterface $form_state, $form_id){
  if($form['#form_id'] == 'search_block_form') {
    $form['keys']['#attributes']['placeholder'][] = t('Search');
  }

  /**
   * Altering the Login Form
   */
  if ($form['#form_id'] == 'user_login_form') {

    $form['title'] = array(
      '#markup' => '<h2>' . t('Already have an account') . '</h2>',
      '#weight' => -10,
    );

    // Remove Labels
    unset($form['name']['#title']);
    unset($form['pass']['#title']);

    // Remove Description
    unset($form['name']['#description']);
    unset($form['pass']['#description']);

    // Remove default Login Button
    $login_button = $form['actions']['submit'];
    unset($form['actions']['submit']);

    // Added Placeholders
    $form['name']['#attributes']['placeholder'][] = t('Username or Email');
    $form['pass']['#attributes']['placeholder'][] = t('Password');

    // wrap two render array elements together
    // Create a container element
    $wrapper = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('custom-auth-actions'),
      ),
    );

    // Add form elements to the container
    // Login Button
    $wrapper['user-submit-action'] = $login_button;

    // Forgot Password Link
    $wrapper['user-forgot-password-action'] = array(
      '#type' => 'text',
      '#title' => (' forgot-password'),
      '#markup' => ('<a href="/user/password" data-drupal-link-system-path="user/register" class="forgot-pass">Forgot password<a>'),
    );

    $form['authactions'] = $wrapper;

    $form['registerhere'] = array(
      '#type' =>   'text',
      '#title' => (' register'),
      '#markup' => (' <a href="/user/register" data-drupal-link-system-path="user/register" class="register-cls">Create Account</a>'),
    );

  }

  // Altering the Registration Form
  if ($form['#form_id'] == 'user_register_form') {

    // Unset Labels
    unset($form['account']['name']['#title']);
    unset($form['account']['pass']['#title']);
    unset($form['account']['mail']['#title']);

    $form['account']['pass']['#type'] = 'password';
    unset($form['account']['pass']['#title']);

    // Setting Placeholders
    $form['account']['name']['#attributes']['placeholder'][] = t('Username');
    $form['account']['mail']['#attributes']['placeholder'][] = t('Email');
    $form['account']['pass']['#attributes']['placeholder'][] = t('Password');

    // Unset Description
    unset($form['account']['name']['#description']);
    unset($form['account']['pass']['#description']);
    unset($form['account']['mail']['#description']);

    // Remove image field from register form
    unset($form['account']['user_picture']);

    // OR divider
    $divider = array(
      '#title' => t(''),
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('or-divider'),
      )
    );

    $part_1 = array(
      '#title' => t('Part 1'),
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('part-1'),
      )
    );

    $part_2 = array(
      '#title' => t('OR'),
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('part-2'),
      )
    );

    $part_3 = array(
      '#title' => t(''),
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('part-3'),
      )
    );

    $divider['part_1'] = $part_1;
    $divider['part_2'] = $part_2;
    $divider['part_3'] = $part_3;

    $form['account']['or_divider'] = $divider;

    // Date wrapper
    // Create a container element to wrap date elements
    $date_wrapper = array(
      '#title' => t('Birthdate'),
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('custom-date'),
      )
    );

    // Generate "Jan" to "Dec" months
    $month = array(
      '01' => t('Jan'),
      '02' => t('Feb'),
      '03' => t('Mar'),
      '04' => t('Apr'),
      '05' => t('May'),
      '06' => t('Jun'),
      '07' => t('Jul'),
      '08' => t('Aug'),
      '09' => t('Sep'),
      '10' => t('Oct'),
      '11' => t('Nov'),
      '12' => t('Dec'),
    );

    $date_wrapper['month'] = array(
      '#title' => t(''),
      '#type' => 'select',
      '#description' => "",
      '#options' => $month,
    );

    // Generate 1 to 31 in values in $values prefix 0 if value less than 10
    $i = 1;
    while ($i <= 31) {
      // if the number is less than 10 then pad '0'
      if($i < 10) {
        $i = sprintf("%02d", $i);
      }
      $values[$i] = $i;
      $i++;
    }

    $date_wrapper['day'] = array(
      '#title' => t(''),
      '#type' => 'select',
      '#description' => "",
      '#options' => $values,
    );

    // Generate years for the range from 1990 to 1922
    $year = array();
    $year[0] = t('Year');
    $i = 1922;
    while ($i <= 1990) {
      $year[$i] = $i;
      $i++;
    }

    $date_wrapper['year'] = array(
      '#title' => t(''),
      '#type' => 'select',
      '#description' => "",
      '#options' => $year,
      '#default_value' => 1990
    );

    // Add date wrapper to the form

    $form['account']['date'] = $date_wrapper;
    
  }
}

use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_views_query_alter().
 */
function pop_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {

  // homepage_featured view
  if ($view->id() == 'homepage_featured') {
    echo t('View accessed.');
  }
  
}

/**
 * Preprocess for view.
 */
function pop_preprocess_views_view(&$variables) {
  if ($variables['view']->storage->id() == 'taxonomy') {
    $variables['#attached']['library'][] = 'pop/taxonomy';
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
 function pop_preprocess_breadcrumb(&$variables){
  if(($node = \Drupal::routeMatch()->getParameter('node')) && $variables['breadcrumb']){
    $variables['breadcrumb'][] = array(
     'text' => $node->getTitle()
     
   );
  }
}
